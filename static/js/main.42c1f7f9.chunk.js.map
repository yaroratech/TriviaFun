{"version":3,"sources":["Question.js","App.js","reportWebVitals.js","index.js"],"names":["Question","question","setNumAnswered","useState","isAnswered","setIsAnswered","handleClick","prevValue","console","log","decideColor","answer","correct_answer","style","display","flexDirection","alignItems","he","decode","answers","map","Button","onClick","variant","disabled","backgroundColor","App","questions","setQuestions","numQuestions","setNumQuestions","numAnswered","fetchQuestions","fetch","then","res","json","results","type","incorrect_answers","rand","Math","floor","random","splice","length","Input","value","onChange","e","target","q","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAIe,SAASA,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,eAC3C,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAc,WAClBD,GAAc,GACdH,GAAe,SAACK,GAGd,OAFAC,QAAQC,IAAIF,EAAY,GAEjBA,EAAY,MAIjBG,EAAc,SAACC,GACnB,OAAKP,EAEDO,IAAWV,EAASW,eAAuB,QAExC,MAJiB,IAO1B,OACE,sBACEC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,WAAY,UADjE,UAGE,6BAAKC,IAAGC,OAAOjB,EAASA,YACxB,8BACGA,EAASkB,QAAQC,KAAI,SAACT,GAAD,OACpB,cAACU,EAAA,EAAD,CACEC,QAAShB,EACTiB,QAAQ,YACRC,SAAUpB,EACVS,MAAO,CACLY,gBAAiBf,EAAYC,IALjC,SASGM,IAAGC,OAAOP,IAFNA,WClCF,SAASe,IACtB,MAAkCvB,mBAAS,IAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAAwCzB,mBAAS,IAAjD,mBAAO0B,EAAP,KAAqBC,EAArB,KACA,EAAsC3B,mBAAS,GAA/C,mBAAO4B,EAAP,KAAoB7B,EAApB,KAEAM,QAAQC,IAAIoB,GAEZ,IAIMG,EAAiB,WACrBC,MAAM,sCAAwCJ,GAC3CK,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,IAAMR,EAAYQ,EAAIE,QAAQjB,KAAI,SAACnB,GACjC,IAAIkB,EAEJ,GAAsB,YAAlBlB,EAASqC,KACXnB,EAAU,CAAC,OAAQ,aACd,CACLA,EAAO,YAAOlB,EAASsC,mBACvB,IAAMC,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE7BxB,EAAQyB,OAAOJ,EAAM,EAAGvC,EAASW,gBAGnC,OAAO,2BAAKX,GAAZ,IAAsBkB,eAGxBS,EAAaD,MAGjBzB,EAAe,IAGjB,OAAyB,IAArByB,EAAUkB,OAEV,sBACEhC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UAJhB,UAOE,cAAC8B,EAAA,EAAD,CAAOR,KAAK,SAASS,MAAOlB,EAAcmB,SAtC3B,SAACC,GACpBnB,EAAgBmB,EAAEC,OAAOH,UAsCrB,cAAC1B,EAAA,EAAD,CAAQC,QAASU,EAAjB,oBAMJ,sBACEnB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UAJhB,UAOGW,EAAUP,KAAI,SAAC+B,GAAD,OACb,cAACnD,EAAD,CACEC,SAAUkD,EACVjD,eAAgBA,GACXiD,EAAElD,aAIV8B,IAAgBqB,SAASvB,IACxB,cAACR,EAAA,EAAD,CAAQC,QAASU,EAAjB,qCCxER,IAYeqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAD,MAEFsC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.42c1f7f9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport he from \"he\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function Question({ question, setNumAnswered }) {\n  const [isAnswered, setIsAnswered] = useState(false);\n\n  const handleClick = () => {\n    setIsAnswered(true);\n    setNumAnswered((prevValue) => {\n      console.log(prevValue + 1);\n\n      return prevValue + 1;\n    });\n  };\n\n  const decideColor = (answer) => {\n    if (!isAnswered) return \"\";\n\n    if (answer === question.correct_answer) return \"green\";\n\n    return \"red\";\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n    >\n      <h1>{he.decode(question.question)}</h1>\n      <div>\n        {question.answers.map((answer) => (\n          <Button\n            onClick={handleClick}\n            variant=\"contained\"\n            disabled={isAnswered}\n            style={{\n              backgroundColor: decideColor(answer),\n            }}\n            key={answer}\n          >\n            {he.decode(answer)}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}","import React, { useState } from \"react\";\nimport { Input, Button } from \"@material-ui/core\";\nimport Question from \"./Question\";\n\nexport default function App() {\n  const [questions, setQuestions] = useState([]);\n  const [numQuestions, setNumQuestions] = useState(10);\n  const [numAnswered, setNumAnswered] = useState(0);\n\n  console.log(numQuestions);\n\n  const handleChange = (e) => {\n    setNumQuestions(e.target.value);\n  };\n\n  const fetchQuestions = () => {\n    fetch(\"https://opentdb.com/api.php?amount=\" + numQuestions)\n      .then((res) => res.json())\n      .then((res) => {\n        const questions = res.results.map((question) => {\n          let answers;\n\n          if (question.type === \"boolean\") {\n            answers = [\"True\", \"False\"];\n          } else {\n            answers = [...question.incorrect_answers];\n            const rand = Math.floor(Math.random() * 3);\n\n            answers.splice(rand, 0, question.correct_answer);\n          }\n\n          return { ...question, answers };\n        });\n\n        setQuestions(questions);\n      });\n\n    setNumAnswered(0);\n  };\n\n  if (questions.length === 0) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Input type=\"number\" value={numQuestions} onChange={handleChange} />\n        <Button onClick={fetchQuestions}>Go!</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      {questions.map((q) => (\n        <Question\n          question={q}\n          setNumAnswered={setNumAnswered}\n          key={q.question}\n        />\n      ))}\n\n      {numAnswered === parseInt(numQuestions) && (\n        <Button onClick={fetchQuestions}>Fetch more questions</Button>\n      )}\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}